{"version":3,"sources":["../src/form_events.js"],"names":["define","$","XELib","Noti","getTokenReady","url","text","getTokenForURL","then","response","success","sessionStorage","setItem","data","console","log","getGroupData","params","jaxyPromise","setHiddenValue","tag","value","val","verifySourceCourse","verifyDestCourse","new_params","getItem","coursename","jaxyRemotePromise","registerMoodleEvents","on","test_url","test_token","JSON","stringify","testWebServices","callNoti","message","msg","type","registerMappingEvents","that","src_form_select","change","count","groupname","empty","first_choice","i","groupid","append","attr","new_value","find","new_text","length","id","destname","courses","registerEvents","init"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Cross Enrollment Tool\n *\n * @package    block_lsuxe\n * @copyright  2008 onwards Louisiana State University\n * @copyright  2008 onwards David Lowe\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n // define(['jquery', 'block_lsuxe/xe_lib', 'block_lsuxe/notifications', 'block_lsuxe/verify'],\n define(['jquery', 'block_lsuxe/xe_lib', 'block_lsuxe/notifications'],\n    // function($, XELib, Noti, Veri) {\n    function($, XELib, Noti) {\n    'use strict';\n    return {\n\n        /**\n         * Fetch the token for the current selected URL. Store in temp sessionStorage\n         *\n         * @param null\n         * @return void\n         */\n        getTokenReady: function () {\n            // Check to see if this is the first time landing or not.\n            var url = $('#id_available_moodle_instances option:selected').text();\n            XELib.getTokenForURL(url).then(function (response) {\n                if (response.success == true) {\n                    sessionStorage.setItem(\"currentToken\", response.data);\n                    sessionStorage.setItem(\"currentUrl\", url);\n                } else {\n                    console.log(\"ERROR: Failed to get the token :-( \");\n                    // TODO: Send Notification to user that token is crap\n                }\n            });\n        },\n\n        /**\n         * Get group data from a course.\n         * @param {object} the json object sent to the server\n         * @return resolved data\n         */\n        getGroupData: function (params) {\n            return XELib.jaxyPromise({\n                'call': 'getGroupData',\n                'params': params,\n                'class': 'router'\n            });\n        },\n\n        /**\n         * Moodle removes any changed option/select elements. In order to maintain\n         * the data push data into hidden some that are in the form's page.\n         *\n         * @param {string} tag name of the tag to be changed\n         * @param {string} value the value to insert\n         * @return {void}\n         */\n        setHiddenValue: function (tag, value) {\n            $('input[name='+tag+']').val(value);\n        },\n\n        /**\n         * Verify the source course and group\n         *\n         * @param {object} params the json object sent to the server\n         * @return {Object} resolved data\n         */\n        verifySourceCourse: function (params) {\n            return XELib.jaxyPromise({\n                'call': 'verifyCourse',\n                'params': params,\n                'class': 'router'\n            });\n        },\n\n        verifyDestCourse: function (params) {\n            var new_params = {\n                'type': 'GET',\n                'url': sessionStorage.getItem(\"currentUrl\") + '/webservice/rest/server.php',\n                'data': {\n                    'wstoken': sessionStorage.getItem(\"currentToken\"),\n                    'wsfunction': 'core_course_get_courses_by_field',\n                    'moodlewsrestformat': 'json',\n                    'field': 'shortname',\n                    'value': params.coursename\n                }\n            };\n            return XELib.jaxyRemotePromise(new_params);\n         },\n\n        // ==================================================================\n        // ==================================================================\n        // ==================================================================\n        // ==================================================================\n        // ==================================================================\n        // ==================================================================\n        // ==================================================================\n        // ==================================================================\n\n        /**\n         * Register all the events for the Mappings Form Page.\n         * @return {void}\n         */\n        registerMoodleEvents: function() {\n            // var that = this;\n                // url_tag = '.xe_confirm_url',\n                // token_tag = '.xe_confirm_token';\n            // Moodle URL Events\n            // Check if the URL is valid\n            // -------------------------------------------\n            /*\n            $(\"#id_instanceurl\").on(\"input\", function() {\n                // that.handleInputValidation(this, \".xe_confirm_url\");\n                if (this.value.length > 0) {\n                    // Show the circle loading\n\n                    that.checkMarkLoading(url_tag);\n                }\n                if (this.value.length == 0) {\n                    that.checkMarkOff(url_tag);\n                }\n            });\n            // -------------------------------------------\n            // When the user clicks out of the Moodle URL input box, check if url is valid.\n            $('#id_instanceurl').on('blur',  function() {\n                // user has clicked out of the URL input, let's check it.\n                if (this.value.length > 0) {\n                    // there is something in the input, let's verify it's correct\n                    if (XELib.isValidUrl(this.value)) {\n                        that.checkMarkComplete(url_tag);\n                        that.crossMarkOff(url_tag);\n\n                    } else {\n                        that.checkMarkOff(url_tag);\n                        that.crossMarkOn(url_tag);\n                        sessionStorage(\"The url is NOT valid\");\n                        // $('.xe_confirm_url > .circle-cross-loader').css('visibility', 'visible');\n                    }\n                } else {\n                    that.checkMarkOff(url_tag);\n                    that.crossMarkOff(url_tag);\n                }\n            });\n            // -------------------------------------------\n            $('#id_instanceurl').on('focus',  function() {\n                // No matter what, if a user clicks in the input, remove the crossmark.\n                that.crossMarkOff(url_tag);\n            });\n\n            // ===========================================\n            // ===========================================\n            // Handle the token input.\n            $(\"#id_instancetoken\").on('input', function() {\n                if (this.value.length > 0) {\n                    // Show the circle loading\n                    that.checkMarkLoading(token_tag);\n                }\n                if (this.value.length == 0) {\n                    that.checkMarkOff(token_tag);\n                }\n            });\n            // -------------------------------------------\n            $(\"#id_instancetoken\").on('blur', function() {\n                // that.handleBlurValidation(this, \".xe_confirm_token\");\n                if (this.value.length > 31) {\n                    // The token length is correct\n                    that.checkMarkComplete(token_tag);\n                    that.crossMarkOff(token_tag);\n\n                } else if (this.value.length < 1) {\n                    that.checkMarkOff(token_tag);\n                    that.crossMarkOff(token_tag);\n\n                } else {\n                    that.crossMarkOn(token_tag);\n                }\n            });\n            // -------------------------------------------\n            $('#id_instancetoken').on('focus',  function() {\n                // that.handleInputValidation(this, \".xe_confirm_token\");\n                // No matter what, if a user clicks in the input, remove the crossmark.\n                that.crossMarkOff(token_tag);\n\n            });\n            */\n            // This is for the Moodles Form\n            $('#id_verifysource').on('click', function() {\n                var test_url = $(\"#id_instanceurl\").val(),\n                    test_token = $(\"#id_instancetoken\").val();\n\n                var params = {\n                    'type': 'GET',\n                    // 'type': 'POST',\n                    // 'url': test_url + '/admin/webservice/testclient.php',\n                    'url': test_url + '/webservice/rest/server.php',\n                    'data': {\n                        'wstoken': test_token,\n                        'wsfunction': 'block_lsuxe_XEAjax',\n                        'moodlewsrestformat': 'json',\n                        // 'data': {\n                        'datachunk': JSON.stringify({\n                            'call': 'testService',\n                            'params': {\n                                'test': 'test',\n                            },\n                            'class': 'router'\n                        })\n                    }\n                };\n\n                XELib.testWebServices(params).then(function (response) {\n                    if (response.success == false) {\n                        Noti.callNoti({\n                            message: response.msg,\n                            type: 'error'\n                        });\n                    } else {\n                        Noti.callNoti({\n                            message: \"Successfully said hello to the remote Moodle instance .\",\n                            type: 'success'\n                        });\n                    }\n\n                });\n            });\n\n            // var new_params = {\n            //     'type': 'GET',\n            //     'url': sessionStorage.getItem(\"currentUrl\") + '/webservice/rest/server.php',\n            //     'data': {\n            //         'wstoken': sessionStorage.getItem(\"currentToken\"),\n            //         'wsfunction': 'core_course_get_courses_by_field',\n            //         'moodlewsrestformat': 'json',\n            //         'field': 'shortname',\n            //         'value': params.coursename\n            //     }\n            // };\n        },\n\n        /**\n         * Register all the events for the Mappings Form Page.\n         * @return void\n         */\n        registerMappingEvents: function() {\n            var that = this,\n                src_form_select = $(\"#id_srccourseshortname\");\n\n            src_form_select.change(function() {\n\n                if (src_form_select.val()) {\n                    // change invokes any change so only make an ajax call if there is value\n                    that.getGroupData({\n                        'courseid': src_form_select.val(),\n                        'coursename': $( \"#id_srccourseshortname option:selected\" ).text()\n                    },).then(function (response) {\n                        // if the text is disabled then use select\n                        if (response.count == 1) {\n                            // Single entry so let's update the text field\n                            $('#id_srccoursegroupnameselect').val(response.data.groupname);\n                            $('#id_srccoursegroupname').val(response.data.groupname);\n\n                        } else if (response.count > 1) {\n                            // Multiple groups, so let's unhide the select\n                            $('#id_srccoursegroupnameselect').empty();\n                            var first_choice = \"\";\n                            for (let i in response.data) {\n                                // This is to store the first select and to be used.\n                                if (first_choice == \"\") {\n                                    first_choice = {\n                                        groupid: response.data[i].groupid,\n                                        groupname: response.data[i].groupname\n                                    };\n                                }\n                                $('#id_srccoursegroupnameselect')\n                                    .append($(\"<option></option>\")\n                                    .attr(\"value\", response.data[i].groupid)\n                                    .text(response.data[i].groupname));\n                            }\n\n                            // Now that it's been populated, set the hidden elements to match the first\n                            // select option.\n                            that.setHiddenValue('srccoursegroupname', first_choice.groupname);\n                            that.setHiddenValue('srccoursegroupid', first_choice.groupid);\n                        } else {\n                            // TODO: The count is neither 1 or greate than 1 so no groups?\n                            // display no groups.\n                        }\n\n                    });\n                } else {\n                    // if there is no value in the course name then clear out the group name.\n                    $('#id_srccoursegroupnameselect').empty();\n                    $('#id_srccoursegroupnametext').text();\n                    $('#id_srccoursegroupnameselect')\n                        .append($(\"<option></option>\")\n                        .attr(\"value\", 0)\n                        .text(\"Please search for a course first\"));\n                }\n            });\n\n            // Any changes to the group element, update the hidden.\n            $(\"#id_srccoursegroupnameselect\").change(function() {\n                var new_value = $(this).find(\"option:selected\").attr('value'),\n                    new_text = $(this).find(\"option:selected\").text();\n                that.setHiddenValue('srccoursegroupname', new_text);\n                that.setHiddenValue('srccoursegroupid', new_value);\n            });\n\n            // Verify the Course and Group Names.\n            $('#id_verifysource').on('click', function() {\n                var coursename = \"\",\n                    groupname = \"\";\n\n                // If we are using the autocomplete feature then the jquery\n                // selector is different.\n                if (sessionStorage.getItem(\"xes_autocomplete\") == \"1\") {\n                    coursename = $(\"#id_srccourseshortname\").find(\"option:selected\").text();\n                    groupname = $(\"#id_srccoursegroupnameselect\").find(\"option:selected\").text();\n                } else {\n                    coursename = $(\"#id_srccourseshortname\").val();\n                    groupname = $(\"#id_srccoursegroupname\").val();\n                }\n\n                if (coursename.length < 1) {\n                    // User forgot to enter a course name.\n                    Noti.callNoti({\n                        message: \"Ooops, you forgot to enter a course short name\",\n                        type: 'error'\n                    });\n                    return;\n                }\n\n                if (groupname.length < 1) {\n                    // User forgot to enter a course name.\n                    Noti.callNoti({\n                        message: \"Ooops, you forgot to enter a group name\",\n                        type: 'error'\n                    });\n                    return;\n                }\n                that.verifySourceCourse({\n                    'coursename': coursename,\n                    'groupname': groupname\n                }).then( function (response) {\n                    if (response.success == false) {\n                        Noti.callNoti({\n                            message: response.msg,\n                            type: 'error'\n                        });\n                    } else {\n                        // Populate the hidden fields since we are here.\n                        that.setHiddenValue('srccourseid', response.data.id);\n                        that.setHiddenValue('srccoursegroupid', response.data.groupid);\n                        Noti.callNoti({\n                            message: \"Everything checks out for the sourse course and group.\",\n                            type: 'success'\n                        });\n                    }\n                });\n\n            });\n\n            $('#id_verifydest').on('click', function() {\n                var destname = $(\"#id_destcourseshortname\").val();\n\n                that.verifyDestCourse({\n                    'coursename': destname\n                }).then( function (response){\n                    if ((\"courses\" in response)) {\n                        // how many courses were retrieved\n                        if (response.courses.length == 1) {\n                            that.setHiddenValue('destcourseid', response.courses[0].id);\n                            Noti.callNoti({\n                                message: \"Destination course is there and waiting for you.\",\n                                type: 'success'\n                            });\n                        } else {\n                            Noti.callNoti({\n                                message: \"There seems to be more than one course with that shortname.\",\n                                type: 'warn'\n                            });\n                        }\n                    } else {\n                        // FALSE\n                        Noti.callNoti({\n                            message: \"The course: \" + destname + \" was not found on the destination server.\",\n                            type: 'error'\n                        });\n                    }\n                });\n            });\n\n            // Register events on the moodles form.\n            // onChange event for the URL selector\n            $('select#id_available_moodle_instances').on('change', function() {\n                that.getTokenReady();\n            });\n        },\n\n        /**\n         * These are registered events being loaded that are NOT being called from mustache templates\n         * @param null\n         * @return resolved data\n         */\n        registerEvents: function () {\n\n            // Let's not load all events, just what we need.\n            if (sessionStorage.getItem('xe_form') == \"mappings\" && sessionStorage.getItem('xe_viewform') == \"true\") {\n                // Register events on the mappings form.\n                this.registerMappingEvents();\n\n            } else if (sessionStorage.getItem('xe_form') == \"moodles\" && sessionStorage.getItem('xe_viewform') == \"true\") {\n                // Register events on the mappings form.\n                this.registerMoodleEvents();\n                // Veri.registerCheckMarkTags()\n                // TODO: move from template to here.\n            }\n        },\n\n        init: function () {\n            this.registerEvents();\n            this.getTokenReady();\n        }\n    };\n});"],"file":"form_events.min.js"}
{"version":3,"sources":["../src/jaxy.js"],"names":["define","$","Ajax","isAorO","val","Array","Object","XEAjax","data_chunk","promiseObj","Promise","resolve","reject","call","methodname","args","datachunk","then","response","JSON","parse","data","catch","ev","console","log","XERemoteAjax","that","ajax","type","url","done","hasOwnProperty","message","fail","jqXHR","textStatus","errorThrown"],"mappings":"AAwBAA,OAAM,oBAAC,CAAC,QAAD,CAAW,WAAX,CAAD,CACF,SAASC,CAAT,CAAYC,CAAZ,CAAkB,CAClB,aACA,MAAO,CAOHC,MAAM,CAAE,gBAASC,CAAT,CAAc,CAClB,MAAOA,CAAAA,CAAG,WAAYC,CAAAA,KAAf,EAAwBD,CAAG,WAAYE,CAAAA,MAAvC,MACV,CATE,CAqBHC,MAAM,CAAE,gBAASC,CAAT,CAAqB,CACzB,GAAIC,CAAAA,CAAU,CAAG,GAAIC,CAAAA,OAAJ,CAAY,SAASC,CAAT,CAAkBC,CAAlB,CAA0B,CAOnDV,CAAI,CAACW,IAAL,CANgB,CAAC,CACbC,UAAU,CAAE,oBADC,CAEbC,IAAI,CAAE,CACFC,SAAS,CAAER,CADT,CAFO,CAAD,CAMhB,EAAqB,CAArB,EAAwBS,IAAxB,CAA6B,SAASC,CAAT,CAAmB,CAC5CP,CAAO,CAACQ,IAAI,CAACC,KAAL,CAAWF,CAAQ,CAACG,IAApB,CAAD,CACV,CAFD,EAEGC,KAFH,CAES,SAASC,CAAT,CAAa,CAClBC,OAAO,CAACC,GAAR,CAAY,2BAAZ,EACAD,OAAO,CAACC,GAAR,CAAY,yCAAZ,CAAuDF,CAAvD,EACAX,CAAM,CAACW,CAAD,CACT,CAND,CAOH,CAdgB,CAAjB,CAeA,MAAOd,CAAAA,CACV,CAtCE,CAuDHiB,YAAY,CAAE,sBAASlB,CAAT,CAAqB,IAC3BmB,CAAAA,CAAI,CAAG,IADoB,CAE3BlB,CAAU,CAAG,GAAIC,CAAAA,OAAJ,CAAY,SAASC,CAAT,CAAkB,CAC3CV,CAAC,CAAC2B,IAAF,CAAO,CACHC,IAAI,CAAErB,CAAU,CAACqB,IADd,CAEHR,IAAI,CAAEb,CAAU,CAACa,IAFd,CAGHS,GAAG,CAAEtB,CAAU,CAACsB,GAHb,CAAP,EAIGC,IAJH,CAIQ,SAAUb,CAAV,CAAoB,CAExB,GAAIA,CAAQ,CAACc,cAAT,CAAwB,WAAxB,CAAJ,CAA0C,CACtCrB,CAAO,CAAC,CACJ,UADI,CAEJ,IAAOO,CAAQ,CAACe,OAFZ,CAAD,CAIV,CALD,IAKO,CAIH,GAAIN,CAAI,CAACxB,MAAL,CAAYe,CAAZ,CAAJ,CAA2B,CACvBP,CAAO,CAACO,CAAD,CACV,CAFD,IAEO,CACHP,CAAO,CAACQ,IAAI,CAACC,KAAL,CAAWF,CAAQ,CAACG,IAApB,CAAD,CACV,CACJ,CACJ,CArBD,EAqBGa,IArBH,CAqBQ,SAAWC,CAAX,CAAkBC,CAAlB,CAA8BC,CAA9B,CAA4C,CAChDb,OAAO,CAACC,GAAR,CAAYU,CAAZ,EACAX,OAAO,CAACC,GAAR,CAAYW,CAAZ,EACAZ,OAAO,CAACC,GAAR,CAAYY,CAAZ,EACA1B,CAAO,CAAC,CACJ,UADI,CAEJ,IAAO,kCAFH,CAAD,CAIV,CA7BD,CA8BH,CA/BgB,CAFc,CAkC/B,MAAOF,CAAAA,CACV,CA1FE,CA4FV,CA/FK,CAAN","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Cross Enrollment Tool\n *\n * @package   block_lsuxe\n * @copyright 2008 onwards Louisiana State University\n * @copyright 2008 onwards David Lowe, Robert Russo\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/ajax',],\n    function($, Ajax) {\n    'use strict';\n    return {\n        /**\n         * Quick check to see if the data chunk is array or object.\n         *\n         * @param object or array\n         * @return bool - If true then it's array or obj\n         */\n        isAorO: function(val) {\n            return val instanceof Array || val instanceof Object ? true : false;\n        },\n\n        /**\n         * AJAX method to access the external services for Cross Enrollment\n         *\n         * @param {object} The request arguments\n         * Format to make calls is:\n         *      'call': [the function name],\n                'params': data you want to pass in JSON format,\n                'class': [class name AND file name, should match]\n         * @return {promise} Resolved with an array of the calendar events\n         */\n        XEAjax: function(data_chunk) {\n            var promiseObj = new Promise(function(resolve, reject) {\n                var send_this = [{\n                    methodname: 'block_lsuxe_xeajax',\n                    args: {\n                        datachunk: data_chunk,\n                    }\n                }];\n                Ajax.call(send_this)[0].then(function(response) {\n                    resolve(JSON.parse(response.data));\n                }).catch(function(ev) {\n                    console.log(\"XEAjax() -> JAXY Fail :-(\");\n                    console.log(\"XEAjax() -> JAXY Fail going to reject: \", ev);\n                    reject(ev);\n                });\n            });\n            return promiseObj;\n        },\n\n        /**\n         * AJAX method to access the remote Moodle instances.\n         * Going to use default jQuery ajax, not Moodles, for more control.\n         *\n         * @param {object} The request arguments\n         * Format to make calls is:\n         *      type: GET or POST,\n                data: {\n                    wstoken: x\n                    wsfunction: x\n                    moodlewsrestformat: x\n                },\n                url: domain + '/webservice/rest/server.php',\n         * @return {promise} Resolved with an array of the calendar events\n         */\n        XERemoteAjax: function(data_chunk) {\n            var that = this;\n            var promiseObj = new Promise(function(resolve) {\n                $.ajax({\n                    type: data_chunk.type,\n                    data: data_chunk.data,\n                    url: data_chunk.url,\n                }).done(function (response) {\n                    // If token is incorrect Moodle will throw an exception.\n                    if (response.hasOwnProperty('exception')) {\n                        resolve({\n                            'success': false,\n                            'msg': response.message\n                        });\n                    } else {\n                        // Need to handle the response. If the request is for Moodle Core\n                        // then the response is an array or object (isAorO).\n                        // otherwise it's a stringified JSON object.\n                        if (that.isAorO(response)) {\n                            resolve(response);\n                        } else {\n                            resolve(JSON.parse(response.data));\n                        }\n                    }\n                }).fail(function ( jqXHR, textStatus, errorThrown ) {\n                    console.log(jqXHR);\n                    console.log(textStatus);\n                    console.log(errorThrown);\n                    resolve({\n                        'success': false,\n                        'msg': \"Could not connect to the server.\"\n                    });\n                });\n            });\n            return promiseObj;\n        },\n    };\n});\n"],"file":"jaxy.min.js"}
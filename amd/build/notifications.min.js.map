{"version":3,"file":"notifications.min.js","names":["define","$","notification","MF","ME","callYesNoModi","data","this_data","promiseObj","Promise","resolve","create","type","types","SAVE_CANCEL","title","body","then","modal","setSaveButtonText","save_button","root","getRoot","on","save","status","show","checkNoti","noti_count","html","length","callNoti","hasOwnProperty","console","log","addNotification","callAlert","storeMsg","sessionStorage","setItem","success","msg","showMsg","getItem","message","removeItem"],"sources":["../src/notifications.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Cross Enrollment Tool\n *\n * @package   block_lsuxe\n * @copyright 2008 onwards Louisiana State University\n * @copyright 2008 onwards David Lowe, Robert Russo\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n define(['jquery', 'core/notification', 'core/modal_factory', 'core/modal_events'],\n    function($, notification, MF, ME) {\n    'use strict';\n\n    return {\n        /**\n         * Confirmation window to SAVE or CANCEL\n         * Type can be either: success, warning, info, error\n         * @param {obj} A simple object with the 'message' and 'type' of notification.\n         * @return void\n         */\n        callYesNoModi: function(data) {\n            var this_data = data;\n            var promiseObj = new Promise(function (resolve) {\n\n                MF.create({\n                    type: MF.types.SAVE_CANCEL,\n                    title: this_data.title,\n                    body: this_data.body\n                })\n                .then(function(modal) {\n                    modal.setSaveButtonText(this_data.save_button);\n                    var root = modal.getRoot();\n                    root.on(ME.save, function() {\n                        resolve({\"status\": true, \"data\": this_data});\n                    });\n                    modal.show();\n                });\n            });\n            return promiseObj;\n        },\n\n        /**\n         * Check if a notification is already showing\n         * @param  {[type]} data [description]\n         * @return {[type]}      [description]\n         */\n        checkNoti: function() {\n            var noti_count = $('span.notifications').html().length;\n            return noti_count == 0 ? true : false;\n        },\n\n        /**\n         * A simple way to call the Moodle core notification system.\n         * Type can be either: success, warning, info, error\n         *  Example:\n         *  noti.callNoti({\n         *      message: \"This is a success test\",\n         *      type: \"success\"\n         *  });\n         * @param {obj} A simple object with the 'message' and 'type' of notification.\n         * @return void\n         */\n        callNoti: function(data) {\n            if (!data.hasOwnProperty('message')) {\n                console.log(\"ERROR -> Notification was called but with no message, aborting.\");\n            }\n            if (!data.hasOwnProperty('type')) {\n                // default to info\n                data.type = \"info\";\n            }\n            // Check to see if there is already a notification posted.\n            if (this.checkNoti()) {\n                notification.addNotification(data);\n            }\n        },\n\n        /**\n         * An alert using the Moodle core notification system.\n         * Type can be either: success, warning, info, error\n         *  Example:\n         *  noti.callNoti({\n         *      title: \"Hello\",\n         *      message: \"This is an alert\",\n         *  });\n         * @param {obj} A simple object with the 'message' and 'type' of notification.\n         * @return void\n         */\n        callAlert: function(data) {\n            if (!data.hasOwnProperty('title')) {\n                console.log(\"ERROR -> An alert was called but with no message, aborting.\");\n            }\n\n            notification.addNotification(data);\n        },\n\n        /**\n         * Store the reponse object to showcase a message after page reload.\n         * @param {obj} Server Response {'success', 'data', 'msg'}\n         *\n         * @return void\n         */\n        storeMsg: function(data) {\n            // Save data to sessionStorage\n            sessionStorage.setItem('sent_delete_success', data.success);\n            sessionStorage.setItem('sent_delete_msg', data.msg);\n        },\n\n        /**\n         *  If a message is stored then show the notification and remove it.\n         * @param void\n         * @return void\n         */\n        showMsg: function() {\n            // Save data to sessionStorage\n            if (sessionStorage.getItem('sent_delete_msg')) {\n                this.callNoti({\n                    message: sessionStorage.getItem('sent_delete_msg'),\n                    type: sessionStorage.getItem('sent_delete_success')\n                });\n                // Remove saved data from sessionStorage\n                sessionStorage.removeItem('sent_delete_msg');\n                sessionStorage.removeItem('sent_delete_success');\n            }\n        }\n    };\n});"],"mappings":"AAwBCA,OAAM,6BAAC,CAAC,QAAQ,CAAE,mBAAmB,CAAE,oBAAoB,CAAE,mBAAmB,CAAC,CAC9E,SAASC,CAAC,CAAEC,CAAY,CAAEC,CAAE,CAAEC,CAAE,CAAE,CAClC,YAAY,CAEZ,MAAO,CAOHC,aAAa,CAAE,SAAAA,cAASC,CAAI,CAAE,IACtB,CAAAC,CAAS,CAAGD,CAAI,CAChBE,CAAU,CAAG,GAAI,CAAAC,OAAO,CAAC,SAAUC,CAAO,CAAE,CAE5CP,CAAE,CAACQ,MAAM,CAAC,CACNC,IAAI,CAAET,CAAE,CAACU,KAAK,CAACC,WAAW,CAC1BC,KAAK,CAAER,CAAS,CAACQ,KAAK,CACtBC,IAAI,CAAET,CAAS,CAACS,IACpB,CAAC,CAAC,CACDC,IAAI,CAAC,SAASC,CAAK,CAAE,CAClBA,CAAK,CAACC,iBAAiB,CAACZ,CAAS,CAACa,WAAW,CAAC,CAC9C,GAAI,CAAAC,CAAI,CAAGH,CAAK,CAACI,OAAO,EAAE,CAC1BD,CAAI,CAACE,EAAE,CAACnB,CAAE,CAACoB,IAAI,CAAE,UAAW,CACxBd,CAAO,CAAC,CAACe,MAAA,GAAc,CAAEnB,IAAA,CAAQC,CAAS,CAAC,CAC/C,CAAC,CAAC,CACFW,CAAK,CAACQ,IAAI,EACd,CAAC,CACL,CAAC,CAAC,CACF,MAAO,CAAAlB,CACX,CAAC,CAODmB,SAAS,CAAE,SAAAA,UAAA,CAAW,CAClB,GAAI,CAAAC,CAAU,CAAG3B,CAAC,CAAC,oBAAoB,CAAC,CAAC4B,IAAI,EAAE,CAACC,MAAM,CACtD,MAAqB,EAAC,EAAfF,CAAe,MAC1B,CAAC,CAaDG,QAAQ,CAAE,SAAAA,SAASzB,CAAI,CAAE,CACrB,GAAI,CAACA,CAAI,CAAC0B,cAAc,CAAC,SAAS,CAAC,CAAE,CACjCC,OAAO,CAACC,GAAG,CAAC,iEAAiE,CACjF,CACA,GAAI,CAAC5B,CAAI,CAAC0B,cAAc,CAAC,MAAM,CAAC,CAAE,CAE9B1B,CAAI,CAACM,IAAI,CAAG,MAChB,CAEA,GAAI,IAAI,CAACe,SAAS,EAAE,CAAE,CAClBzB,CAAY,CAACiC,eAAe,CAAC7B,CAAI,CACrC,CACJ,CAAC,CAaD8B,SAAS,CAAE,SAAAA,UAAS9B,CAAI,CAAE,CACtB,GAAI,CAACA,CAAI,CAAC0B,cAAc,CAAC,OAAO,CAAC,CAAE,CAC/BC,OAAO,CAACC,GAAG,CAAC,6DAA6D,CAC7E,CAEAhC,CAAY,CAACiC,eAAe,CAAC7B,CAAI,CACrC,CAAC,CAQD+B,QAAQ,CAAE,SAAAA,SAAS/B,CAAI,CAAE,CAErBgC,cAAc,CAACC,OAAO,CAAC,qBAAqB,CAAEjC,CAAI,CAACkC,OAAO,CAAC,CAC3DF,cAAc,CAACC,OAAO,CAAC,iBAAiB,CAAEjC,CAAI,CAACmC,GAAG,CACtD,CAAC,CAODC,OAAO,CAAE,SAAAA,QAAA,CAAW,CAEhB,GAAIJ,cAAc,CAACK,OAAO,CAAC,iBAAiB,CAAC,CAAE,CAC3C,IAAI,CAACZ,QAAQ,CAAC,CACVa,OAAO,CAAEN,cAAc,CAACK,OAAO,CAAC,iBAAiB,CAAC,CAClD/B,IAAI,CAAE0B,cAAc,CAACK,OAAO,CAAC,qBAAqB,CACtD,CAAC,CAAC,CAEFL,cAAc,CAACO,UAAU,CAAC,iBAAiB,CAAC,CAC5CP,cAAc,CAACO,UAAU,CAAC,qBAAqB,CACnD,CACJ,CACJ,CACJ,CAAC,CAAC"}